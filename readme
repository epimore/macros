//like java get & set & new
//未指定struct字段：全部字段构建get/set/new
//指定struct字段时：指定字段构建get/set/new(其他字段Default::default())
use constructor::{Get, Set, New};

#[derive(Set, Get, New, Default, Debug, PartialEq)]
pub struct Foo {
    a: i32,
    b: String,
    c: bool,
    d: Option<u32>,
}

#[test]
fn test_foo() {
    let mut foo = Foo::new(112i32, String::from("abc"), true, Some(12u32));
    let rf = Foo { a: 112, b: "abc".to_string(), c: true, d: Some(12u32) };
    assert_eq!(&foo, &rf);
    foo.set_a(456);
    foo.set_b("bb".to_string());
    assert_eq!(foo.get_a(), &456i32);
    assert_eq!(foo.get_b(), &"bb".to_string());
}


#[derive(Set, Get, New, Default, Debug, PartialEq)]
#[set(b, c)]
#[get(b, c)]
#[new(b, c)]
pub struct Bar {
    a: i32,
    b: String,
    c: bool,
    d: f32,
}

#[test]
fn test_bar() {
    let mut bar = Bar::new("bbb".to_string(), true);
    let rb = Bar { a: 0, b: String::from("bbb"), c: true, d: 0.0f32 };
    assert_eq!(&bar, &rb);
    bar.set_b("nb");
    bar.set_c(false);
    assert_eq!(bar.get_b(), &"nb".to_string());
    assert_eq!(*bar.get_c(), false);
}

#[derive(Set, Get, New, Default, Debug, PartialEq)]
pub struct UnFoo(u32, String, bool);

#[test]
fn test_un_foo() {
    let mut un_foo = UnFoo::new(1u32, "sss".to_string(), true);
    let ruf = UnFoo(1u32, "sss".to_string(), true);
    assert_eq!(&un_foo, &ruf);
    un_foo.set_0(10u32);
    un_foo.set_1("xxx".to_string());
    un_foo.set_2(false);
    assert_eq!(un_foo.get_0(), &10u32);
    assert_eq!(un_foo.get_1(), &"xxx".to_string());
    assert_eq!(un_foo.get_2(), &false);
}


#[derive(Set, Get, New, Default, Debug, PartialEq)]
#[set(0, 2)]
#[get(0, 2)]
#[new(0, 2)]
pub struct UnBar(u32, String, bool, i32);

#[test]
fn test_un_bar() {
    let mut un_bar = UnBar::new(234u32, true);
    let rub = UnBar(234u32, "".to_string(), true, 0);
    assert_eq!(&un_bar, &rub);
    un_bar.set_0(111u32);
    un_bar.set_2(false);
    assert_eq!(un_bar.get_0(), &111u32);
    assert_eq!(un_bar.get_2(), &false);
}
----------------------
#[derive(Default, Debug, Clone, Serialize, Deserialize, PartialEq, Eq, Get, Set, New)]
#[new(device_id, domain_id, domain)]
#[crud(table_name = "GMV_OAUTH",
funs = [
{fn_name = "add_gmv_oauth", sql_type = "create:single", exist_update = "true"},
{fn_name = "add_gmv_oauth_by_batch", sql_type = "create:batch"},
{fn_name = "delete_gmv_oauth", sql_type = "delete", condition = "device_id:=,domain_id:="},
{fn_name = "update_gmv_oauth_pwd", sql_type = "update", fields = "pwd", condition = "device_id:=,domain_id:="},
{fn_name = "read_gmv_oauth_single_all", sql_type = "read:single", condition = "device_id:=,domain_id:="},
{fn_name = "read_gmv_oauth_single_pwd", sql_type = "read:single", fields = "pwd", condition = "device_id:=,domain_id:=", res_type = "false"},
{fn_name = "read_gmv_oauth_batch_status", sql_type = "read:batch", condition = "status:=", order = "device_id:desc" page = "true", res_type = "true"},
])]
struct GmvOauth {
    device_id: String,
    domain_id: String,
    domain: String,
    pwd: Option<String>,
    pwd_check: u8,
    alias: Option<String>,
    status: u8,
}

///The macro crud will generate the following code:
/// ************
/// impl User
/// {
/// pub fn add_gmv_oauth(& self, conn : & mut mysql :: PooledConn)
///   {
///       use mysql :: prelude :: Queryable ; use mysql :: params ; use common
///       :: err :: TransError ; use common :: log :: error ; let _ =
///       conn.exec_drop("INSERT INTO GMV_OAUTH (device_id,domain_id,domain,pwd,pwd_check,alias,status) VALUES (:device_id,:domain_id,:domain,:pwd,:pwd_check,:alias,:status) ON DUPLICATE KEY UPDATE device_id=VALUES(device_id),domain_id=VALUES(domain_id),domain=VALUES(domain),pwd=VALUES(pwd),pwd_check=VALUES(pwd_check),alias=VALUES(alias),status=VALUES(status)",
///       params!
///       {
///           "device_id" => & self.get_device_id(), "domain_id" => &
///           self.get_domain_id(), "domain" => & self.get_domain(), "pwd" => &
///           self.get_pwd(), "pwd_check" => & self.get_pwd_check(), "alias" =>
///           & self.get_alias(), "status" => & self.get_status()
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}")) ;
///   } pub fn
///   add_gmv_oauth_by_batch(vec : Vec < Self >, conn : & mut mysql ::
///   PooledConn)
///   {
///       use mysql :: prelude :: Queryable ; use mysql :: params ; use common
///       :: err :: TransError ; use common :: log :: error ; let _ =
///       conn.exec_batch("INSERT INTO GMV_OAUTH (device_id,domain_id,domain,pwd,pwd_check,alias,status) VALUES (:device_id,:domain_id,:domain,:pwd,:pwd_check,:alias,:status)",
///       vec.iter().map(| p | params!
///       {
///           "device_id" => & p.get_device_id(), "domain_id" => &
///           p.get_domain_id(), "domain" => & p.get_domain(), "pwd" => &
///           p.get_pwd(), "pwd_check" => & p.get_pwd_check(), "alias" => &
///           p.get_alias(), "status" => & p.get_status()
///       })).hand_err(| msg | error! ("数据库操作失败: {msg}")) ;
///   } pub fn
///   delete_gmv_oauth(conn : & mut mysql :: PooledConn, device_id : String,
///   domain_id : String)
///   {
///       use mysql :: prelude :: Queryable ; use common :: err :: TransError ;
///       use mysql :: params ; use common :: log :: error ; let _ =
///       conn.exec_drop("DELETE FROM GMV_OAUTH WHERE device_id=:device_id AND domain_id=:domain_id",
///       params!
///       {
///           "device_id" => device_id, "domain_id" => domain_id
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}")) ;
///   } pub fn
///   update_gmv_oauth_pwd(& self, conn : & mut mysql :: PooledConn, c_device_id
///   : String, c_domain_id : String)
///   {
///       use mysql :: prelude :: Queryable ; use common :: err :: TransError ;
///       use mysql :: params ; use common :: log :: error ; let _ =
///       conn.exec_drop("UPDATE GMV_OAUTH SET pwd=:pwd WHERE device_id=:c_device_id AND domain_id=:c_domain_id",
///       params!
///       {
///           "pwd" => & self.get_pwd(), c_device_id, c_domain_id
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}")) ;
///   } pub fn
///   read_gmv_oauth_single_all(conn : & mut mysql :: PooledConn, device_id :
///   String, domain_id : String) -> common :: err :: GlobalResult < Option <
///   GmvOauth >>
///   {
///       use mysql :: prelude :: Queryable ; use common :: err :: TransError ;
///       use common :: log :: error ; use mysql :: params ; let res =
///       conn.exec_first("SELECT device_id,domain_id,domain,pwd,pwd_check,alias,status FROM GMV_OAUTH WHERE device_id=:device_id AND domain_id=:domain_id",
///       params!
///       {
///           device_id, domain_id
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}"))
///       ?.map(| (device_id, domain_id, domain, pwd, pwd_check, alias, status)
///       | GmvOauth
///       { device_id, domain_id, domain, pwd, pwd_check, alias, status }) ;
///       Ok(res)
///   } pub fn read_gmv_oauth_single_pwd < T : mysql :: prelude :: FromRow >
///   (conn : & mut mysql :: PooledConn, device_id : String, domain_id : String)
///   -> common :: err :: GlobalResult < Option < T >>
///   {
///       use mysql :: prelude :: Queryable ; use common :: err :: TransError ;
///       use common :: log :: error ; use mysql :: params ; let res =
///       conn.exec_first("SELECT pwd FROM GMV_OAUTH WHERE device_id=:device_id AND domain_id=:domain_id",
///       params!
///       {
///           device_id, domain_id
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}")) ? ;
///       Ok(res)
///   } pub fn
///   read_gmv_oauth_batch_status(conn : & mut mysql :: PooledConn, status : u8,
///   _limit_start : u32, _limit_end : u32) -> common :: err :: GlobalResult <
///   Vec < GmvOauth >>
///   {
///       use mysql :: prelude :: Queryable ; use common :: err :: TransError ;
///       use common :: log :: error ; use mysql :: params ; let res =
///       conn.exec("SELECT device_id,domain_id,domain,pwd,pwd_check,alias,status FROM GMV_OAUTH WHERE status=:status ORDER BY device_id DESC LIMIT :_limit_start, :_limit_end",
///       params!
///       {
///           status, _limit_start, _limit_end
///       }).hand_err(| msg | error! ("数据库操作失败: {msg}"))
///       ?.into_iter().map(|
///       (device_id, domain_id, domain, pwd, pwd_check, alias, status) |
///       GmvOauth
///       {
///           device_id, domain_id, domain, pwd, pwd_check, alias, status
///       }).collect() ; Ok(res)
///   }
/// }
/// ************






